mport java.util.*;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.stream.Stream;

public class CsvProcessor {

    // 静态方法：验证字段不为空
    private static void validateNotEmpty(String header, Map<String, String> map, Consumer<String> errorHandler) {
        String value = map.get(header);
        if (value == null || value.trim().isEmpty()) {
            errorHandler.accept(header + " cannot be empty");
        }
    }

    // 静态方法：处理错误信息
    private static void handleValidationError(String header, String value) {
        System.out.println("Error: " + header + " has invalid value: " + value);
    }

    // 定义枚举，每个枚举实例包含一个 header、验证函数和错误处理函数
    public enum CsvFieldValidator {
        NAME("name", CsvProcessor::validateNotEmpty, CsvProcessor::handleValidationError),
        AGE("age", CsvProcessor::validateNotEmpty, CsvProcessor::handleValidationError),
        SEX("sex", CsvProcessor::validateNotEmpty, CsvProcessor::handleValidationError);

        private final String header;
        private final BiConsumer<String, Map<String, String>> validator;
        private final BiConsumer<String, String> errorHandler;

        CsvFieldValidator(String header, BiConsumer<String, Map<String, String>> validator, BiConsumer<String, String> errorHandler) {
            this.header = header;
            this.validator = validator;
            this.errorHandler = errorHandler;
        }

        public void validate(Map<String, String> map) {
            try {
                String value = map.get(header);
                validator.accept(header, map);
            } catch (Exception e) {
                e.printStackTrace(); // 处理异常
            }
        }
    }

    public static Map<String, String> processCsvRecord(Map<String, String> csvRecord) {
        Stream.of(CsvFieldValidator.values())
                .forEach(validator -> validator.validate(csvRecord));

        return Collections.emptyMap(); // 返回空的错误 map
    }

    public static void main(String[] args) {
        // 示例 CSV 记录
        Map<String, String> csvRecord = new HashMap<>();
        csvRecord.put("name", "John");
        csvRecord.put("age", "NA");
        csvRecord.put("sex", "M");

        // 处理 CSV 记录
        Map<String, String> errors = processCsvRecord(csvRecord);

        // 输出错误信息
        if (errors.isEmpty()) {
            System.out.println("All fields are valid.");
        } else {
            errors.forEach((k, v) -> System.out.println(k + ": " + v));
        }
    }
}
