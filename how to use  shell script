import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Map;

class CsvValidationUtils {
    private static final Logger logger = LoggerFactory.getLogger(CsvValidationUtils.class);

    static Object getValue(String header, Map<String, Object> map) {
        return map.get(header);
    }

    static void validateNotEmpty(String header, Map<String, Object> map) {
        Object value = getValue(header, map);
        if (value == null || value.toString().trim().isEmpty()) {
            handleValidationError(header + " cannot be empty", map);
        }
    }

    static void validateValueInList(String header, Map<String, Object> map, List<String> validValues) {
        Object value = getValue(header, map);
        if (value != null && !validValues.contains(value.toString())) {
            handleValidationError("Invalid value for " + header + ": " + value + ". Allowed values are: " + validValues, map);
        }
    }

    static void validateValueWithRegex(String header, Map<String, Object> map, String regex) {
        Object value = getValue(header, map);
        if (value != null && !value.toString().matches(regex)) {
            handleValidationError("Invalid value for " + header + ": " + value + ". Value must match regex: " + regex, map);
        }
    }

    static void validateColOrder(String header, Map<String, Object> map) {
        int rowNumber = (int) map.get("Row Number");
        int colOrder = (int) getValue(header, map);
        if (rowNumber != colOrder) {
            handleValidationError("Invalid col order at row " + rowNumber + ": expected " + rowNumber, map);
        }
    }

    static void handleValidationError(String errorMessage, Map<String, Object> map) {
        int colOrder = (int) getValue("col order", map);
        logger.error("Error: " + errorMessage + " at col order " + colOrder);
    }

    static void addRowNumbers(List<Map<String, Object>> records) {
        int rowNumber = 1;
        for (Map<String, Object> record : records) {
            record.put("Row Number", rowNumber++);
        }
    }

    static BiConsumer<String, Map<String, Object>> chainValidators(BiConsumer<String, Map<String, Object>> first, BiConsumer<String, Map<String, Object>> second) {
        return (header, map) -> {
            first.accept(header, map);
            second.accept(header, map);
        };
    }
}
CsvFieldValidator.java
java
复制代码
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.stream.Stream;

public enum CsvFieldValidator {
    NAME("name", CsvValidationUtils::validateNotEmpty),
    AGE("age", CsvValidationUtils.chainValidators(CsvValidationUtils::validateNotEmpty, (header, map) -> CsvValidationUtils.validateValueInList(header, map, List.of("20", "30", "40")))),
    SEX("sex", CsvValidationUtils.chainValidators(CsvValidationUtils::validateNotEmpty, (header, map) -> CsvValidationUtils.validateValueInList(header, map, List.of("male", "female")))),
    COL_ORDER("col order", CsvValidationUtils::validateColOrder);

    private final String header;
    private final BiConsumer<String, Map<String, Object>> validator;

    CsvFieldValidator(String header, BiConsumer<String, Map<String, Object>> validator) {
        this.header = header;
        this.validator = validator;
    }

    public void validate(List<Map<String, Object>> records) {
        for (Map<String, Object> record : records) {
            validator.accept(header, record);
        }
    }

    public static void addRowNumbers(List<Map<String, Object>> records) {
        int rowNumber = 1;
        for (Map<String, Object> record : records) {
            record.put("Row Number", rowNumber++);
        }
    }

    public static BiConsumer<Map<String, Object>, Map<String, Object>> combinedValidator() {
        return Stream.of(CsvFieldValidator.values())
                .map(validator -> (BiConsumer<Map<String, Object>, Map<String, Object>>) (map, errMap) -> validator.validator.accept(validator.header, map))
                .reduce(BiConsumer::andThen)
                .orElse((map, errMap) -> {});
    }
}
CsvProcessor.java
java
复制代码
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;

public class CsvProcessor {
    public static void main(String[] args) {
        // Parse CSV and obtain records
        List<Map<String, Object>> records = parseCsv("example.csv");

        // Add row numbers to records
        CsvFieldValidator.addRowNumbers(records);

        // Validate all fields using combinedValidator
        BiConsumer<Map<String, Object>, Map<String, Object>> combinedValidator = CsvFieldValidator.combinedValidator();
        Map<String, Object> errorMap = new HashMap<>();  // This is just for demonstration, it won't be used in this context

        for (Map<String, Object> record : records) {
            combinedValidator.accept(record, errorMap);
        }
    }

    private static List<Map<String, Object>> parseCsv(String filename) {
        // Parse CSV file and return records
        // Dummy implementation, replace with actual CSV parsing logic
        List<Map<String, Object>> records = new ArrayList<>();
        // Example of parsing CSV and adding records
        Map<String, Object> record1 = new HashMap<>();
        record1.put("name", "John");
        record1.put("age", "30");
        record1.put("sex", "male");
        record1.put("col order", 1);
        records.add(record1);

        Map<String, Object> record2 = new HashMap<>();
        record2.put("name", "Alice");
        record2.put("age", "25");
        record2.put("sex", "female");
        record2.put("col order", 2);
        records.add(record2);

        // Add more records...

        return records;
    }
}



  public static BiConsumer<Map<String, Object>, Map<String, Object>> combinedValidator() {
        return Stream.of(CsvFieldValidator.values())
                .flatMap(validator -> Stream.of(
                        (BiConsumer<Map<String, Object>, Map<String, Object>>) (map, errMap) -> validator.validateNotEmpty(map),
                        (BiConsumer<Map<String, Object>, Map<String, Object>>) (map, errMap) -> validator.validator.accept(validator.header, map)
                ))
                .reduce(BiConsumer::andThen)
                .orElse((map, errMap) -> {});
    }


BiConsumer<Map<String, Object>, Map<String, Object>> validateNotEmptyConsumer = (record, errMap) -> {
    for (CsvFieldValidator validator : CsvFieldValidator.values()) {
        CsvValidationUtils.validateNotEmpty(validator.header, record);
    }
};
说明
