import java.util.*;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

class CsvValidationUtils {
    static void validateNotEmpty(String header, Map<String, String> map) {
        String value = map.get(header);
        if (value == null || value.trim().isEmpty()) {
            handleValidationError(header);
        }
    }

    static void handleValidationError(String header) {
        System.out.println("Error: " + header + " cannot be empty");
    }

    static void validateSex(String header, Map<String, String> map) {
        String value = map.get(header);
        if (!value.equalsIgnoreCase("male") && !value.equalsIgnoreCase("female")) {
            System.out.println("Error: Sex must be 'male' or 'female'");
        }
    }

    static BiConsumer<String, Map<String, String>> validateAge() {
        return (header, map) -> {
            String value = map.get(header);
            try {
                int age = Integer.parseInt(value);
                if (age < 0 || age > 110) {
                    System.out.println("Error: Age must be between 0 and 110");
                }
            } catch (NumberFormatException e) {
                System.out.println("Error: Invalid value for age: " + value);
            }
        };
    }
}

public enum CsvFieldValidator {
    NAME("name", CsvValidationUtils::validateNotEmpty, Function.identity()),
    AGE("age", CsvValidationUtils::validateNotEmpty, CsvValidationUtils::validateAge()),
    SEX("sex", CsvValidationUtils::validateSex, CsvValidationUtils::validateSex);

    private final String header;
    private final BiConsumer<String, Map<String, String>> validator;
    private final BiConsumer<String, Map<String, String>> valueValidator;

    CsvFieldValidator(String header, BiConsumer<String, Map<String, String>> validator, BiConsumer<String, Map<String, String>> valueValidator) {
        this.header = header;
        this.validator = validator;
        this.valueValidator = valueValidator;
    }

    public void validate(Map<String, String> map) {
        try {
            validator.accept(header, map);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void validateValue(Map<String, String> map) {
        valueValidator.accept(header, map);
    }

    public static BiConsumer<Map<String, String>, Map<String, String>> combinedValidator() {
        return (map, errorMap) -> {
            for (CsvFieldValidator fieldValidator : CsvFieldValidator.values()) {
                fieldValidator.validate(map);
                fieldValidator.validateValue(map);
            }
        };
    }
}

public class CsvProcessor {
    public static void processCsvRecord(Map<String, String> csvRecord) {
        BiConsumer<Map<String, String>, Map<String, String>> combinedValidator = CsvFieldValidator.combinedValidator();
        combinedValidator.accept(csvRecord, null);
    }

    public static void main(String[] args) {
        Map<String, String> csvRecord = new HashMap<>();
        csvRecord.put("name", "John");
        csvRecord.put("age", "25");
        csvRecord.put("sex", "male");

        processCsvRecord(csvRecord);
    }
}
